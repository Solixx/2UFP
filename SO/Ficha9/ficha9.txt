exercício 1 e 2:

#include <stdio.h>
#include <bits/pthreadtypes.h>
#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

pthread_mutex_t mutex;
sem_t Leitores,Escritores;
int em_escrita = 0,leitores_espera=0,escritores_espera=0,nleitores = 0,nescritores = 0;


void * inicia_leitura(void* arg){
    int id = *(int *) arg;
    while (1){
        pthread_mutex_lock(&mutex);
        if(em_escrita || escritores_espera > 0){
            leitores_espera++;
            pthread_mutex_unlock(&mutex);
            sem_wait(&Leitores);
            pthread_mutex_lock(&mutex);
        }
        else{
            nleitores++;
        }
        pthread_mutex_unlock(&mutex);
        printf("Leitor %d: Lendo...\n", id);
        pthread_mutex_lock(&mutex);
        nleitores--;
        if(nleitores == 0 && escritores_espera == 0){
            sem_post(&Escritores);
            em_escrita = 1;
            escritores_espera--;
        }
        pthread_mutex_unlock(&mutex);
    }
}

void * inicia_escrita(void* arg){
    int id = *(int *) arg;
    while (1){
        pthread_mutex_lock(&mutex);
        if(em_escrita || nleitores > 0){
            escritores_espera++;
            pthread_mutex_unlock(&mutex);
            sem_wait(&Escritores);
            pthread_mutex_lock(&mutex);
        }
        else{
            em_escrita=1;
        }
        pthread_mutex_unlock(&mutex);
        printf("Escritor %d: Escrevendo...\n", id);
        pthread_mutex_lock(&mutex);
        em_escrita = 0;
        if(leitores_espera > 0){
            for (int i = 0; i < leitores_espera; ++i) {
                sem_post(&Leitores);
                nleitores++;
                leitores_espera--;
            }
        }else if(escritores_espera > 0){
            sem_post(&Escritores);
            em_escrita=1;
            escritores_espera--;
        }
        pthread_mutex_unlock(&mutex);
    }
}

void *print_state(void *arg) {
    while (1) {
        printf("nleitores: %d, em_escrita: %d, leitores_espera: %d, escritores_espera: %d\n", nleitores, em_escrita, leitores_espera, escritores_espera);
        sleep(1);
    }
}
int ficha9_ex1(int argc, char *argv[]){
    sem_init(&Leitores,0,0);
    sem_init(&Escritores,0,0);
    pthread_t leitores[atoi(argv[1])],escritores[atoi(argv[2])],print_task;
    int leitor_ids[10], escritor_ids[10];
    pthread_mutex_init(&mutex, NULL);
    pthread_create(&print_task, NULL, print_state, NULL);
    for (int i = 0; i <atoi(argv[1]) ; ++i) {
        leitor_ids[i] = i;
        pthread_create(&(leitores[i]),NULL,&inicia_leitura,(void *)&leitor_ids[i]);
    }
    for (int i = 0; i <atoi(argv[2]) ; ++i) {
        escritor_ids[i] = i;
        pthread_create(&(escritores[i]),NULL,&inicia_escrita,(void *)&escritor_ids[i]);
    }
    pthread_join(print_task, NULL);
    pthread_mutex_destroy(&mutex);
    for (int i = 0; i <atoi(argv[1]) ; ++i) {
        pthread_join((leitores[i]),NULL);
    }
    for (int i = 0; i <atoi(argv[2]) ; ++i) {
        pthread_join((escritores[i]),NULL);
    }
    sem_destroy(&Leitores);
    sem_destroy(&Escritores);
    return 0;
}


#define N 5
int buf[N],prodptr=0, consptr=0;
pthread_mutex_t trinco_p, trinco_c;
sem_t pode_prod,pode_cons;

int gerarNumeroAleatorio() {
    srand(time(NULL)); // Inicializa a semente randômica com o tempo atual
    int numero = rand() % 100; // Gera um número aleatório entre 0 e 100
    return numero;
}

void* Produtores(void *arg){
    int id = *(int *) arg;
    while (1){
        int item = gerarNumeroAleatorio();
        sem_wait(&pode_prod);
        pthread_mutex_lock(&trinco_p);
        buf[prodptr] = item;
        prodptr = (prodptr + 1) % N;
        pthread_mutex_unlock(&trinco_p);
        sem_post(&pode_cons);
        printf("Produtor %d produziu %d\n",id,item);
        sleep(1);
    }
}

void* Consumidores(void *arg){
    int id = *(int *) arg;
    while (1){
        int item;
        sem_wait(&pode_cons);
        pthread_mutex_lock(&trinco_c);
        item = buf[consptr];
        consptr = (consptr + 1) % N;
        pthread_mutex_unlock(&trinco_c);
        sem_post(&pode_prod);
        printf("Consumidor %d consumiu %d\n",id,item);
        sleep(1);
    }
}

void* print_arr(void *arg){
    while (1){
        printf("[");
        for (int i = 0; i < N; ++i) {
            printf(" %d ",buf[i]);
        }
        printf("] \n");
        sleep(1);
    }
}

int ficha9_ex2(int argc, char *argv[]){
    sem_init(&pode_prod,0,1);
    sem_init(&pode_cons,0,0);
    pthread_mutex_init(&trinco_c, NULL);
    pthread_mutex_init(&trinco_p, NULL);
    int produtor_id[atoi(argv[1])],consumidor_id[atoi(argv[2])];
    pthread_t  produtores[atoi(argv[1])],consumidores[atoi(argv[2])],print_array;
    pthread_create(&print_array,NULL,print_arr,NULL);
    for (int i = 0; i < atoi(argv[1]); ++i) {
        produtor_id[i] = i;
        pthread_create(&(produtores[i]),NULL,Produtores,(void*) &produtor_id[i]);
    }
    for (int i = 0; i < atoi(argv[2]); ++i) {
        consumidor_id[i] = i;
        pthread_create(&(consumidores[i]),NULL,Consumidores,(void*) &consumidor_id[i]);
    }

    for (int i = 0; i <atoi(argv[1]) ; ++i) {
        pthread_join((produtores[i]),NULL);
    }
    for (int i = 0; i <atoi(argv[2]) ; ++i) {
        pthread_join((consumidores[i]),NULL);
    }
    pthread_join(print_array,NULL);
    pthread_mutex_destroy(&trinco_c);
    pthread_mutex_destroy(&trinco_p);
    sem_destroy(&pode_prod);
    sem_destroy(&pode_cons);
    return 0;
}
int main(int argc, char *argv[]) {
    //ficha9_ex1(argc,argv);
    ficha9_ex2(argc,argv);
    return 0;
}
