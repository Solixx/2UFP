#include <stdio.h>
#include <bits/pthreadtypes.h>
#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5

void* produtor();
void* consumidor();
int produz();

int buf[N];
int prodptr = 0, consptr = 0;
pthread_mutex_t trinco_p, trinco_c;
sem_t pode_prod;
sem_t pode_cons;

int main(int argc, char *argv[]) {
    sem_init(&pode_prod, 0, N);
    sem_init(&pode_cons, 0, 0);
    pthread_mutex_init(&trinco_c, NULL);
    pthread_mutex_init(&trinco_p, NULL);
    pthread_t pCons[atoi(argv[1])];
    pthread_t pProd[atoi(argv[2])];

    for (int i = 0; i < atoi(argv[1]); ++i) {
        pthread_create(&pProd[i], NULL, &produtor, NULL);
    }

    for (int i = 0; i < atoi(argv[2]); ++i) {
        pthread_create(&pCons[i], NULL, &consumidor, NULL);
    }

    while (1){
        printf("[");
        for (int i = 0; i < N; ++i) {
            printf(" %d ",buf[i]);
        }
        printf("] \n");
        sleep(1);
    }

    return 0;
}

int produz() {
    int numero = rand() % 100; // Gera um número aleatório entre 0 e 100
    return numero;
}


void consome(int arg){
    for (int i = 0; i < N; ++i) {
        if(buf[i] == arg){
            buf[i] = 0;
        }
    }
}

void* produtor(){
    while (1){
        int item = produz();
        sem_wait(&pode_prod);
        pthread_mutex_lock(&trinco_p);
        buf[prodptr] = item;
        prodptr = (prodptr+1)%N;
        pthread_mutex_unlock(&trinco_p);
        sem_post(&pode_cons);
    }
}

void* consumidor(){
    while (1){
        int item;
        sem_wait(&pode_cons);
        pthread_mutex_lock(&trinco_c);
        item = buf[consptr];
        consptr = (consptr+1)%N;
        pthread_mutex_unlock(&trinco_c);
        sem_post(&pode_prod);
        consome(item);
    }
}