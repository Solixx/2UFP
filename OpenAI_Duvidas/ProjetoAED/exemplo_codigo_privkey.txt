unsigned long long calc_private_key_int(unsigned long long pubkey){
    unsigned long long privKey = 0;
    short *n;
    int digitos = numDigitsLong(pubkey*2), j = 0, changePos = 0;
    short *allD = key_long_2_digits_int(pubkey*2);
    short rightNum = allD[1], leftNum = allD[0];

    if(pubkey <= 5){
        rightNum = 0;
        leftNum = 1;
    }
    if(digitos < 2) digitos = 2;
    if (pubkey == 0) return 0;
    n = (short *) calloc(digitos, sizeof (short));

    unsigned long long max_iterations = (unsigned long long) 1000000000000;
    for (int i = 0; i < max_iterations; i++) {
        if (leftNum == 9 && changePos == digitos - 1 && rightNum == 8) {
            digitos++;
            n = realloc(n, digitos * sizeof(int));
            changePos--;
            leftNum = 1;
            rightNum = 0;
        }
        if (rightNum == 9 && changePos == digitos - 1) {
            leftNum++;
        }
        if (changePos == digitos - 1) {
            changePos = 0;
            if (rightNum != 9) {
                rightNum++;
            } else {
                rightNum = 0;
            }
        }
        if (leftNum == rightNum) {
            rightNum++;
        }
        if (j > changePos) {
            n[j] = rightNum;
        } else {
            n[j] = leftNum;
        }
        if(j == digitos-1){
            n[digitos] = -1;
            privKey = key_digits_2_long_int(n);
            //printf("PivKey = %llu\n", privKey);
            if(privKey > 1000000000000 || privKey < 0){
                n=NULL;
                free(n);
                return 0;
            }
            if(privKey > pubkey && privKey%pubkey == 0){
                n=NULL;
                free(n);
                return privKey;
            }
            changePos++;
            j = 0;

        } else{
            j++;
        }
    }
    return 0;
}